#!/usr/bin/env python3

import requests
import ssl
import socket
import sys
from urllib.parse import urlparse
from datetime import datetime
import json

class WebSecurityAnalyzer:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'WebSecurityAnalyzer/1.0'
        })
        self.timeout = 10
        self.results = {
            'url': '',
            'scan_time': '',
            'security_headers': {},
            'cookie_security': [],
            'ssl_tls_info': {},
            'recommendations': [],
            'risk_score': 0
        }
    
    def analyze_website(self, url):
        """Main analysis function"""
        if not url.startswith(('http://', 'https://')):
            url = 'https://' + url
        
        self.results['url'] = url
        self.results['scan_time'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        print(f"\n[*] Analyzing: {url}")
        print("=" * 60)
        
        try:
            # Get initial response
            response = self.session.get(url, timeout=self.timeout)
            
            # Analyze different security aspects
            self.check_security_headers(response)
            self.analyze_cookies(response)
            
            # Only check SSL/TLS for HTTPS sites
            if url.startswith('https://'):
                self.check_ssl_tls(url)
            else:
                print("[!] WARNING: Site not using HTTPS - all traffic is unencrypted!")
                self.results['recommendations'].append("Implement HTTPS encryption")
                self.results['risk_score'] += 30
            
            # Generate final report
            self.generate_report()
            
        except requests.exceptions.RequestException as e:
            print(f"[!] Error connecting to {url}: {str(e)}")
            return False
        
        return True
    
    def check_security_headers(self, response):
        """Check for important HTTP security headers"""
        print("\n[+] Checking Security Headers:")
        print("-" * 30)
        
        # Define security headers to check
        security_headers = {
            'X-Frame-Options': {
                'description': 'Clickjacking protection',
                'secure_values': ['DENY', 'SAMEORIGIN'],
                'risk_score': 10
            },
            'X-XSS-Protection': {
                'description': 'XSS filtering',
                'secure_values': ['1; mode=block'],
                'risk_score': 8
            },
            'X-Content-Type-Options': {
                'description': 'MIME sniffing protection',
                'secure_values': ['nosniff'],
                'risk_score': 5
            },
            'Strict-Transport-Security': {
                'description': 'HTTPS enforcement',
                'secure_values': [],  # Any value is good
                'risk_score': 15
            },
            'Content-Security-Policy': {
                'description': 'Content injection protection',
                'secure_values': [],  # Any policy is better than none
                'risk_score': 20
            },
            'Referrer-Policy': {
                'description': 'Referrer information control',
                'secure_values': ['strict-origin', 'strict-origin-when-cross-origin', 'no-referrer'],
                'risk_score': 5
            },
            'Permissions-Policy': {
                'description': 'Feature policy control',
                'secure_values': [],
                'risk_score': 3
            }
        }
        
        for header, config in security_headers.items():
            header_value = response.headers.get(header)
            
            if header_value:
                # Header is present
                is_secure = True
                if config['secure_values']:
                    is_secure = any(secure_val.lower() in header_value.lower() 
                                  for secure_val in config['secure_values'])
                
                status = "✓ SECURE" if is_secure else "⚠ WEAK"
                print(f"  {status}: {header}")
                print(f"    Value: {header_value}")
                print(f"    Purpose: {config['description']}")
                
                self.results['security_headers'][header] = {
                    'present': True,
                    'value': header_value,
                    'secure': is_secure
                }
                
                if not is_secure:
                    self.results['risk_score'] += config['risk_score'] // 2
                    self.results['recommendations'].append(
                        f"Improve {header} header configuration"
                    )
            else:
                # Header is missing
                print(f"  ✗ MISSING: {header}")
                print(f"    Purpose: {config['description']}")
                print(f"    Risk: Increases vulnerability to attacks")
                
                self.results['security_headers'][header] = {
                    'present': False,
                    'value': None,
                    'secure': False
                }
                
                self.results['risk_score'] += config['risk_score']
                self.results['recommendations'].append(
                    f"Add {header} header for {config['description']}"
                )
            
            print()
    
    def analyze_cookies(self, response):
        """Analyze cookie security settings"""
        print("\n[+] Analyzing Cookie Security:")
        print("-" * 30)
        
        cookies = response.cookies
        
        if not cookies:
            print("  No cookies found in response")
            return
        
        for cookie in cookies:
            cookie_info = {
                'name': cookie.name,
                'secure': cookie.secure,
                'httponly': hasattr(cookie, 'httponly') and cookie.httponly,
                'samesite': getattr(cookie, 'samesite', None),
                'issues': []
            }
            
            print(f"  Cookie: {cookie.name}")
            
            # Check Secure flag
            if cookie.secure:
                print(f"    ✓ Secure flag: Present")
            else:
                print(f"    ✗ Secure flag: Missing (cookie sent over HTTP)")
                cookie_info['issues'].append("Missing Secure flag")
                self.results['risk_score'] += 5
            
            # Check HttpOnly flag
            if cookie_info['httponly']:
                print(f"    ✓ HttpOnly flag: Present")
            else:
                print(f"    ✗ HttpOnly flag: Missing (accessible via JavaScript)")
                cookie_info['issues'].append("Missing HttpOnly flag")
                self.results['risk_score'] += 8
            
            # Check SameSite attribute
            if cookie_info['samesite']:
                print(f"    ✓ SameSite: {cookie_info['samesite']}")
            else:
                print(f"    ✗ SameSite: Missing (vulnerable to CSRF)")
                cookie_info['issues'].append("Missing SameSite attribute")
                self.results['risk_score'] += 6
            
            # Add recommendations
            if cookie_info['issues']:
                for issue in cookie_info['issues']:
                    self.results['recommendations'].append(
                        f"Fix cookie '{cookie.name}': {issue}"
                    )
            
            self.results['cookie_security'].append(cookie_info)
            print()
    
    def check_ssl_tls(self, url):
        """Check SSL/TLS configuration"""
        print("\n[+] Checking SSL/TLS Configuration:")
        print("-" * 35)
        
        parsed_url = urlparse(url)
        hostname = parsed_url.hostname
        port = parsed_url.port or 443
        
        try:
            # Create SSL context
            context = ssl.create_default_context()
            
            # Connect and get certificate info
            with socket.create_connection((hostname, port), timeout=10) as sock:
                with context.wrap_socket(sock, server_hostname=hostname) as ssock:
                    cert = ssock.getpeercert()
                    cipher = ssock.cipher()
                    tls_version = ssock.version()
                    
                    # Analyze certificate
                    self.analyze_certificate(cert)
                    
                    # Analyze cipher and TLS version
                    self.analyze_cipher_tls(cipher, tls_version)
                    
        except Exception as e:
            print(f"  ✗ SSL/TLS Error: {str(e)}")
            self.results['ssl_tls_info']['error'] = str(e)
            self.results['risk_score'] += 25
            self.results['recommendations'].append("Fix SSL/TLS configuration issues")
    
    def analyze_certificate(self, cert):
        """Analyze SSL certificate"""
        if not cert:
            print("  ✗ No certificate information available")
            return
        
        # Certificate expiration
        not_after = cert.get('notAfter')
        if not_after:
            from datetime import datetime
            expiry_date = datetime.strptime(not_after, '%b %d %H:%M:%S %Y %Z')
            days_until_expiry = (expiry_date - datetime.now()).days
            
            if days_until_expiry < 0:
                print(f"  ✗ Certificate: EXPIRED {abs(days_until_expiry)} days ago")
                self.results['risk_score'] += 50
                self.results['recommendations'].append("Renew expired SSL certificate")
            elif days_until_expiry < 30:
                print(f"  ⚠ Certificate: Expires in {days_until_expiry} days")
                self.results['risk_score'] += 10
                self.results['recommendations'].append("Renew SSL certificate soon")
            else:
                print(f"  ✓ Certificate: Valid (expires in {days_until_expiry} days)")
            
            self.results['ssl_tls_info']['cert_expiry_days'] = days_until_expiry
        
        # Certificate issuer
        issuer = cert.get('issuer', [])
        if issuer:
            issuer_name = next((item[0][1] for item in issuer if item[0][0] == 'organizationName'), 'Unknown')
            print(f"  Certificate Issuer: {issuer_name}")
            self.results['ssl_tls_info']['issuer'] = issuer_name
        
        # Subject Alternative Names
        san = cert.get('subjectAltName', [])
        if san:
            domains = [name[1] for name in san if name[0] == 'DNS']
            print(f"  Covered domains: {', '.join(domains[:3])}{'...' if len(domains) > 3 else ''}")
    
    def analyze_cipher_tls(self, cipher, tls_version):
        """Analyze cipher suite and TLS version"""
        if tls_version:
            print(f"  TLS Version: {tls_version}")
            self.results['ssl_tls_info']['tls_version'] = tls_version
            
            # Check for outdated TLS versions
            if tls_version in ['SSLv2', 'SSLv3', 'TLSv1', 'TLSv1.1']:
                print(f"  ✗ Outdated TLS version detected!")
                self.results['risk_score'] += 30
                self.results['recommendations'].append("Update to TLS 1.2 or higher")
            elif tls_version in ['TLSv1.2', 'TLSv1.3']:
                print(f"  ✓ Secure TLS version")
        
        if cipher:
            cipher_name = cipher[0] if cipher[0] else 'Unknown'
            print(f"  Cipher Suite: {cipher_name}")
            self.results['ssl_tls_info']['cipher'] = cipher_name
            
            # Check for weak ciphers
            weak_ciphers = ['RC4', 'DES', '3DES', 'NULL', 'EXPORT']
            if any(weak in cipher_name.upper() for weak in weak_ciphers):
                print(f"  ✗ Weak cipher detected!")
                self.results['risk_score'] += 20
                self.results['recommendations'].append("Disable weak cipher suites")
    
    def generate_report(self):
        """Generate final security report"""
        print("\n" + "=" * 60)
        print("SECURITY ANALYSIS REPORT")
        print("=" * 60)
        
        # Risk assessment
        if self.results['risk_score'] <= 20:
            risk_level = "LOW"
            risk_color = "✓"
        elif self.results['risk_score'] <= 50:
            risk_level = "MEDIUM"  
            risk_color = "⚠"
        else:
            risk_level = "HIGH"
            risk_color = "✗"
        
        print(f"\nOverall Security Risk: {risk_color} {risk_level} (Score: {self.results['risk_score']})")
        
        # Summary statistics
        headers_missing = sum(1 for h in self.results['security_headers'].values() if not h['present'])
        cookies_with_issues = sum(1 for c in self.results['cookie_security'] if c['issues'])
        
        print(f"\nSummary:")
        print(f"  Missing security headers: {headers_missing}/7")
        print(f"  Insecure cookies: {cookies_with_issues}")
        print(f"  Total recommendations: {len(self.results['recommendations'])}")
        
        # Top recommendations
        if self.results['recommendations']:
            print(f"\nTop Recommendations:")
            for i, rec in enumerate(self.results['recommendations'][:5], 1):
                print(f"  {i}. {rec}")
            
            if len(self.results['recommendations']) > 5:
                print(f"  ... and {len(self.results['recommendations']) - 5} more")
        else:
            print(f"\n✓ No security issues found!")
        
        # Save detailed report
        self.save_report()
    
    def save_report(self):
        """Save detailed report to file"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        hostname = urlparse(self.results['url']).hostname
        filename = f"security_report_{hostname}_{timestamp}.json"
        
        try:
            with open(filename, 'w') as f:
                json.dump(self.results, f, indent=2)
            print(f"\nDetailed report saved: {filename}")
        except Exception as e:
            print(f"\nError saving report: {e}")

def main():
    if len(sys.argv) != 2:
        print("Usage: python3 web_security_analyzer.py <URL>")
        print("Example: python3 web_security_analyzer.py https://example.com")
        sys.exit(1)
    
    url = sys.argv[1]
    analyzer = WebSecurityAnalyzer()
    
    print("Web Security Analyzer v1.0")
    print("Checking HTTP headers, cookies, and SSL/TLS configuration")
    
    success = analyzer.analyze_website(url)
    
    if success:
        print(f"\n[*] Analysis complete for {url}")
    else:
        print(f"\n[!] Analysis failed for {url}")
        sys.exit(1)

if __name__ == "__main__":
    main()